// Simple Synchronous RAM Module
module simple_sync_ram #(
    parameter DATA_WIDTH = 8,
    parameter ADDR_WIDTH = 4
) (
    input wire                   clk,
    input wire                   rst,
    input wire                   we,      // Write Enable
    input wire [ADDR_WIDTH-1:0]  addr,
    input wire [DATA_WIDTH-1:0]  din,
    output reg [DATA_WIDTH-1:0]  dout
);

    // Memory array
    reg [DATA_WIDTH-1:0] mem [0:(1<<ADDR_WIDTH)-1];

    always @(posedge clk) begin
        if (rst)
            dout <= 0;
        else if (we) begin
            mem[addr] <= din;
            dout <= din; // Optionally output the written data
        end else begin
            dout <= mem[addr];
        end
    end
endmodule
// Testbench for simple_sync_ram
module tb_simple_sync_ram;

    parameter DATA_WIDTH = 8;
    parameter ADDR_WIDTH = 4;

    reg clk;
    reg rst;
    reg we;
    reg [ADDR_WIDTH-1:0] addr;
    reg [DATA_WIDTH-1:0] din;
    wire [DATA_WIDTH-1:0] dout;

    // Instantiate RAM
    simple_sync_ram #(
        .DATA_WIDTH(DATA_WIDTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) dut (
        .clk(clk),
        .rst(rst),
        .we(we),
        .addr(addr),
        .din(din),
        .dout(dout)
    );

    // Clock generation
    initial clk = 0;
    always #5 clk = ~clk; // 100MHz clock

    initial begin
        $display("Starting RAM Testbench...");
        rst = 1; we = 0; addr = 0; din = 0;
        #12;
        rst = 0;

        // Write to address 3
        @(negedge clk);
        addr = 4'd3; din = 8'hAA; we = 1;
        @(negedge clk);
        we = 0;

        // Read from address 3
        @(negedge clk);
        addr = 4'd3;
        @(negedge clk);
        $display("Read from addr 3: %h (expected AA)", dout);

        // Write to address 7
        @(negedge clk);
        addr = 4'd7; din = 8'h55; we = 1;
        @(negedge clk);
        we = 0;

        // Read from address 7
        @(negedge clk);
        addr = 4'd7;
        @(negedge clk);
        $display("Read from addr 7: %h (expected 55)", dout);

        // Read from address 0 (default)
        @(negedge clk);
        addr = 4'd0;
        @(negedge clk);
        $display("Read from addr 0: %h (expected 00)", dout);

        $display("RAM Testbench completed.");
        $stop;
    end

endmodule
